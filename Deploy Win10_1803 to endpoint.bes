<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Deploy Win10_1803 to endpoint</Title>
		<Description><![CDATA[<P class=FixletMessage>Stage Installation Files</P>
<DIV class=FixletMessage>
<UL>
<LI></LI></UL></DIV>
<P>INSTALL</P>
<UL>
<LI>Perform inplace upgrade to Window 10&nbsp;1803</LI></UL>
<P>Cleanup</P>
<UL>
<LI>Removes the Stage Installation Files</LI></UL>]]></Description>
		<Relevance>(if( name of operating system starts with "Win" ) then platform id of operating system != 3 else false) AND (if exists property "in proxy agent context" then ( not in proxy agent context ) else true )</Relevance>
		<Relevance>x64 of operating system AND not ia64 of operating system</Relevance>
		<Relevance>(it starts with "Win" AND it does not start with "Win20") of name of operating system AND (exists value "CurrentMajorVersionNumber" of it AND value "CurrentMajorVersionNumber" of it as integer = 10) of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry</Relevance>
		<Relevance>exists regapp "powershell.exe"</Relevance>
		<Relevance>operating system as string does not contain "1803"</Relevance>
		<Relevance>system ui language as string as lowercase = "English (United States)" as lowercase</Relevance>
		<Relevance>exists value "EditionID" whose (it as string as lowercase = "EducationN" as lowercase OR it as string as lowercase = "Education" as lowercase OR it as string as lowercase = "ProfessionalN" as lowercase OR it as string as lowercase = "Professional" as lowercase OR it as string as lowercase = "EnterpriseN" as lowercase OR it as string as lowercase = "Enterprise" as lowercase) of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion" of native registry</Relevance>
		<Relevance>if exist file "C:\temp\Win10\SW_DVD9_Win_Pro_Ent_Edu_N_10_1803_64BIT_English_-4_MLF_X21-87129.ISO" then true else false</Relevance>
		<Category>Upgrade</Category>
		<DownloadSize>10</DownloadSize>
		<Source>Microsoft</Source>
		<SourceID>Unspecified</SourceID>
		<SourceReleaseDate>2017-10-17</SourceReleaseDate>
		<SourceSeverity>Unspecified</SourceSeverity>
		<CVENames>Unspecified</CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-first-propagation</Name>
			<Value>Thu, 02 Nov 2017 11:52:26 +0000</Value>
		</MIMEField>
		<MIMEField>
			<Name>no-relevance-health-check</Name>
			<Value>false</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-product-family</Name>
			<Value>Windows</Value>
		</MIMEField>
		<MIMEField>
			<Name>bigfixme-added-time</Name>
			<Value>Wed, 06 Jun 2018 11:41:26 GMT</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-component</Name>
			<Value>Unspecified</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-product</Name>
			<Value>Win10</Value>
		</MIMEField>
		<MIMEField>
			<Name>bigfixme-modification-time</Name>
			<Value>Wed, 06 Jun 2018 11:41:26 GMT</Value>
		</MIMEField>
		<MIMEField>
			<Name>bigfixme-keywords</Name>
			<Value>Win10 1803</Value>
		</MIMEField>
		<MIMEField>
			<Name>bigfixme-ID</Name>
			<Value>25519</Value>
		</MIMEField>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Tue, 28 Aug 2018 13:19:31 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink>to execute this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
//Start inplace upgrade
if {free space of drive of client > 5000000000}

parameter "workISO" = "C:\temp\Win10\SW_DVD9_Win_Pro_Ent_Edu_N_10_1803_64BIT_English_-4_MLF_X21-87129.ISO"
continue if {exists file (parameter "workISO")} 
continue if {sha1 of file (parameter "workISO") = "bdaf443e43bc392565041ed25137402f14afb09e"}
			
// prepare a workpath to temporary files.
parameter "workPath" = "{(value of variable "SystemDrive" of environment) & "\win10_upgrade_temp"}"
waithidden cmd /C rmdir /S /Q "{parameter "workPath"}"
waithidden cmd /C mkdir "{parameter "workPath"}"

// Create the cleanup file.
delete __appendfile
delete setupcomplete.cmd

appendfile @echo off
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile powershell.exe "Dismount-DiskImage ""%WindowsISO%"""
appendfile rmdir /S /Q "{parameter "workPath"}"

move __appendfile setupcomplete.cmd


// Create a debug invocation batch to help in case of failures.
// This batch does not perform an update but with the scanonly option allows you to determine what the problem is. 
delete __appendfile

appendfile @echo off
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile FOR /F "skip=3" %%I IN ('powershell.exe "Get-DiskImage """%WindowsISO%""" | Get-Volume | Select-Object {{$_.DriveLetter}"') DO %%I:\setup.exe /auto upgrade /Compat ScanOnly /DynamicUpdate disable"
appendfile echo %errorlevel% > "{parameter "workPath"}\out.log"

move __appendfile "{(parameter "workPath") & "/upgradeCheck.bat"}"

// Create the actual invocation script
// Sleep and Dir were added or command would fail with %errorlevel%	183. Possibly a delay on mount.		
delete __appendfile
delete mount.and.install.bat

appendfile @echo on
appendfile SET WindowsISO="{parameter "workISO"}"
appendfile powershell.exe "Mount-DiskImage ""%WindowsISO%"""
appendfile TIMEOUT 10
appendfile FOR /F "skip=3" %%I IN ('powershell.exe "Get-DiskImage """%WindowsISO%""" | Get-Volume | Select-Object {{$_.DriveLetter}"') DO dir %%I: > "{parameter "workPath"}\dir.log" && %%I:\setup.exe /auto upgrade /Quiet /NoReboot /DynamicUpdate disable /postoobe /copylogs C:\win10_upgrade_temp\install.txt "{pathname of client folder of current site & "\setupcomplete.cmd"}"
appendfile echo %errorlevel% > "{parameter "workPath"}\out.log"
move __appendfile mount.and.install.bat

wait mount.and.install.bat > "{parameter "workPath"}\cmd.log"

wait setupcomplete.cmd >"{parameter "workPath"}\setupcomplete.log"

// setup must finish with RC=0 at this stage if things are ok. If that is not the case content of C:\"\win10_upgrade_temp dir holds useful info. 
// Apart from log files, you can run upgradeCheck manually to check with the UI what the problem is. 

action requires restart "bdaf443e43bc392565041ed25137402f14afb09e"
endif

]]></ActionScript>
		</DefaultAction>
	</Task>
</BES>
